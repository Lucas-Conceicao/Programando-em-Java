/*Utilizando o exemplo dado para resolução do problema da mochila, aplique a tecnica do memoization para melhorar o 
desempenho da recursividade.*/
import java.util.HashMap;
import java.util.Map;

public class Main {
    private static Map<String, Long> memo = new HashMap<>();

    public static long knapsack(int capacidade, int[] pesos, int[] valores, int n) {

        if (n == 0 || capacidade == 0)
            return 0;

        //chave composta pois precisa de 2 parâmetros a capacidade e o n 
        String key = capacidade + "," + n;

        if (memo.containsKey(key))
            return memo.get(key);

        if (pesos[n - 1] > capacidade) {
            long resultado = knapsack(capacidade, pesos, valores, n - 1);
            memo.put(key, resultado);
            return resultado;
        } 
        else {
            long incluir = valores[n - 1] + knapsack(capacidade - pesos[n - 1], pesos, valores, n - 1);
            long naoIncluir = knapsack(capacidade, pesos, valores, n - 1);
            long resultado = Math.max(incluir, naoIncluir);
            memo.put(key, resultado);
            return resultado;
        }
    }

    public static void main(String[] args) {
        int[] valores = {600, 100, 120};
        int[] pesos = {10, 20, 30};
        int capacidade = 50;
        int n = valores.length;
        System.out.println("Valor máximo na mochila: " + knapsack(capacidade, pesos, valores, n));
    }
}
