/*A atividade consiste no seguinte: 
Criar um programa que permita o cadastro de 10 números inteiros correspondentes ao código de um livro, e junto a esses códigos deve-se cadastrar o nome destes livros... 
Ao concluir o cadastro, ordene utilizando o algoritmo de ordenação que será listado abaixo e depois permita ao usuário digitar um número para efetuar a busca, se encontrar, retorne o livro correspondente.

Obs: a ordenação pode ser feita com quicksort ou bubblesort porém o Quick vale o valor inteiro e o bubble vale 2/3. O mesmo vale para busca binária que vale o valor inteiro e a busca linear vale 2/3).*/
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;

public class Main {
    public static void quickSort(int[] arr, int inicio, int fim) {
        if (inicio < fim) {
            int indicePivo = particionar(arr, inicio, fim);
            quickSort(arr, inicio, indicePivo - 1);
            quickSort(arr, indicePivo + 1, fim);
        }
    }

    public static int particionar(int[] arr, int inicio, int fim) {
        int pivo = arr[fim];
        int i = (inicio - 1);

        for (int j = inicio; j < fim; j++) {
            if (arr[j] <= pivo) {
                i++; 
                trocar(arr, i, j);
            }
        }
        trocar(arr, i + 1, fim);
        // Retorna o índice do pivô
        return i + 1;
    }

    private static void trocar(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static int buscaBinaria(int[] arr, int codigo) {
        int inicio = 0, fim = arr.length - 1, meio;

        while (inicio <= fim) {
            meio = inicio + (fim - inicio) / 2;

            if (arr[meio] == codigo) 
                return meio;

            else if (arr[meio] < codigo) 
                inicio = meio + 1;

            else 
                fim = meio - 1;
        }
        return -1; 
    }

    public static void main(String[] args) {
        Map<Integer, String> memo = new HashMap<>();
        Scanner scanner = new Scanner(System.in);

        int[] arr = new int[10];
        String nome;

        // Cadastro dos livros
        for(int i = 0; i < 10; i++){
            System.out.println("Insira o codigo do " + (i+1) + "º livro:");
            arr[i] = scanner.nextInt();
            scanner.nextLine(); // limpa o buffer
            System.out.println("Insira o nome do " + (i+1) + "º livro:");
            nome = scanner.nextLine(); 
            memo.put(arr[i], nome); // atribuindo o código como chave para achar o nome do livro
        }
        //Não ordenado
        System.out.println("\nCódigos não ordenados: ");
        for(int i = 0; i < 10; i++)
            System.out.println("Código: " + arr[i] + " - Livro: " + memo.get(arr[i]));
        
        //Ordenação pelo código
        quickSort(arr, 0, arr.length - 1); 
        System.out.println("\nCódigos ordenados:");
        for(int i = 0; i < 10; i++)
            System.out.println("Código: " + arr[i] + " - Livro: " + memo.get(arr[i]));

        //busca pelo código
        int codigoBusca, resultado, resposta;
        do{
            System.out.println("\nDigite o código do livro que deseja buscar:");
            codigoBusca = scanner.nextInt();
            resultado = buscaBinaria(arr, codigoBusca);
            if (resultado != -1) 
                System.out.println("Livro encontrado: " + memo.get(codigoBusca));

            else 
                System.out.println("Livro não encontrado!");

            System.out.println("Digite 1 caso queira procurar um outro livro: ");
            resposta = scanner.nextInt();
            scanner.nextLine();
        }while(resposta == 1);

        System.out.println("programa encerrado!");
        scanner.close();
    }
